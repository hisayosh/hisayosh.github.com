<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hisayosh-&gt;blog</title><link>http://hisayosh.github.io/</link><description></description><atom:link href="http://hisayosh.github.io/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 24 Dec 2013 12:25:00 +0900</lastBuildDate><item><title>新208.5日問題 - Systems with Intel® Xeon® Processor E5 hung after upgrade of Red Hat Enterprise Linux 6</title><link>http://hisayosh.github.io/posts/2013/12/208days-problem/</link><description>&lt;p&gt;Linux の連続稼働時間が 208.5 日を過ぎた段階で突如 Kernel Panic を引き起こすという過激な挙動で2011年の年の瀬に話題となった "旧208.5日問題" ですが、あれから二年が経った今、Linux Kernel 内の bug と Intel Xeon CPU の bug の合わせ技により再度類似の不具合が発生することが分かっています。  &lt;/p&gt;
&lt;p&gt;旧 208.5 日問題の発生原理に関しては以下の blog がよくまとまっています。&lt;br /&gt;
&lt;a href="http://kenichiokuyama.blogspot.jp/2011/12/schedclock-overflow-after-2085-days-in.html"&gt;okkyの銀河制圧奇譚 : sched_clock() overflow after 208.5 days in Linux Kernel&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;影響範囲&lt;/h3&gt;
&lt;p&gt;旧 208.5 日問題の対策パッチがあたっている Linux Kernel であっても、本 208.5 日問題は異なるロジックにより発生するため、影響を受けます。
Red Hat Enterprise Linux 6.2, 6.3, and 6.4 
(kernel 2.6.32-220, 2.6.32-279, and 2.6.32-358 series)  &lt;/p&gt;
&lt;h3&gt;不具合発生&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Intel Xeon E5 シリーズのプロセッサーを利用していること  &lt;/li&gt;
&lt;li&gt;上記影響範囲に記述した Linux Kernel のうち、修正パッチが当たっていないもの（これらのバージョンのうち現在稼働中の RHEL 及び RHEL 系サーバはほとんどが該当すると思います。）  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;※RHEL では kernel-2.6.32-220.45.1.el6 (6.2), kernel-2.6.32-279.37.2.el6 (6.3), kernel-2.6.32-358.23.2.el6 (6.4), kernel-2.6.32-431.el6 (6.5) で修正されているようです。  &lt;/p&gt;
&lt;h3&gt;結論&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;不具合対象の環境は、サーバ停止・起動に関する一時的な運用オペレーションの見直しが必要です。サーバ再起動は cold reboot にしましょう。  &lt;/li&gt;
&lt;li&gt;根本解決には、対策パッチをあてるか、kernel code を修正してリビルドしたものを組み込みましょう  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;不具合発生原理　旧 208.5 日問題のおさらい&lt;/h3&gt;
&lt;p&gt;旧 208.5 日問題は以下のインライン関数が原因となり発生します。CPU 内の TSC (Time Stamp Counter) の値を nano sec order の clock として利用するためのロジックです。CYCNS_SCALE_FACTOR は整数の 10 を表します。  &lt;/p&gt;
&lt;p&gt;linux-2.6.32-220 : /arch/x86/include/asm/timer.h  &lt;/p&gt;
&lt;p CYC2NS_SCALE_FACTOR_="CYC2NS_SCALE_FACTOR;
" _="&amp;gt;&amp;gt;" cpu="cpu" cpu_="cpu)" cyc="cyc" int="int" long="long" ns="ns" ns_="ns;
" per_cpu_cyc2ns_="per_cpu(cyc2ns," per_cpu_cyc2ns_offset_="per_cpu(cyc2ns_offset," return="return" smp_processor_id_="smp_processor_id();
" unsigned="unsigned"&gt;static inline unsigned long long __cycles_2_ns(unsigned long long cyc)&lt;/p&gt;
&lt;p&gt;ご覧の通り、TSC の値を TSC * SC &amp;gt;&amp;gt; 10 することで 64 bit 変数に nano sec を代入しようとしているので、10 bit shift が行われる前の段階では pico sec order の演算を行うことになります。pico sec order の 1 秒を表現するためには、約 40 bit の空間が必要となります。変数が 64 bit であるため、 1 秒以上の表現のためには残り約 24 bit 程しかなく、208.5日問題における 208.5 日とは、この約 24 bit で表現できる日数の上限を表したものになっています。（この日数を超えると overflow が発生します。）  &lt;/p&gt;
&lt;h3&gt;不具合発生原理　新 208.5 日問題の解説&lt;/h3&gt;
&lt;p&gt;Linux Kernel を起動する際、各種初期化処理を行う start_kernel()内 で x86_late_time_init() という関数が呼び出されます。&lt;/p&gt;
&lt;p&gt;linux-2.6.32.358 : /arch/x86/kernel/time.c&lt;/p&gt;
&lt;p _="
" tsc_init_="tsc_init();
" x86_init.timers.timer_init_="x86_init.timers.timer_init();
"&gt;static __init void x86_late_time_init(void)&lt;/p&gt;
&lt;p&gt;このうち、tsc_init() の中で、cyc2ns_offset の初期化を行います。この初期化処理は、旧 208.5 日問題と同一のロジックを経由します。しかし、Linux の起動時には、 CPU の仕様として TSC がリセットされるはずであり、Linux 起動プロセスの初期段階である本関数がコールされる時点で TSC が 208.5 日に到達しているはずがなく、優先度の低い問題として扱われていたのだと思います。&lt;/p&gt;
&lt;p&gt;linux-2.6.32-358 : /arch/x86/kernel/tsc.c  &lt;/p&gt;
&lt;p&gt;static void set_cyc2ns_scale(unsigned long cpu_khz, int cpu)
{
    unsigned long long tsc_now, ns_now, &lt;em&gt;offset;
    unsigned long flags, &lt;/em&gt;scale;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;local_irq_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;sched_clock_idle_sleep_event&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;per_cpu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cyc2ns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;per_cpu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cyc2ns_offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;rdtscll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tsc_now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ns_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__cycles_2_ns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tsc_now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpu_khz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSEC_PER_MSEC&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;CYC2NS_SCALE_FACTOR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cpu_khz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ns_now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tsc_now&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;CYC2NS_SCALE_FACTOR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;sched_clock_idle_wakeup_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;local_irq_restore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;しかし、時を同じくして、Intel Xeon Processor E5 Family は以下の不具合を抱えていました。本来リセットされるはずの TSC の値が、 Warm Reset (通常の再起動)時に初期化されないという不具合です。サーバの電源断を経由しない限り、 E5 Family Processor の TSC の値は保持され続けます。  &lt;/p&gt;
&lt;p&gt;BT81. X X X No Fix TSC is Not Affected by Warm Reset&lt;br /&gt;
&lt;a href="http://www.intel.com/content/dam/www/public/us/en/documents/specification-updates/xeon-e5-family-spec-update.pdf"&gt;Intel® Xeon® Processor E5 Family&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;つまり、新 208.5 日問題とは、最後に電源停止を行ってから208.5日程度経過した段階で、再起動をした際に前述の初期化処理において offset 計算が overflow することで顕在化します。旧 208.5 日問題とは異なり、稼働中の OS では発生しませんが、再起動時に突然ハング状態になるため、対策パッチをあてるか、tsc.c &amp;amp; kernel.h を自前で修正してリビルドするか、運用プロセスを一時的に変更する必要があります。kexecを行った歳も同様の問題が発生する可能性がありますので、注意しましょう。&lt;/p&gt;
&lt;p&gt;記事に間違いや不明な点がありましたら、ご指摘下さい。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hisayoshi Tamaki</dc:creator><pubDate>Tue, 24 Dec 2013 12:25:00 +0900</pubDate><guid>tag:hisayosh.github.io,2013-12-24:posts/2013/12/208days-problem/</guid><category>Linux</category><category>Bug</category></item><item><title>Identity Conferene 15</title><link>http://hisayosh.github.io/posts/2013/02/idcon-15/</link><description>&lt;p&gt;Identity Conference 15(#idcon) に参加してきました。&lt;br /&gt;
 非常に勉強になったので今後も参加できればなぁと思うと同時に&lt;br /&gt;
 SSO/IDM製品の開発に携わった経験がありながら初参加という状況で少し反省。  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://idcon.doorkeeper.jp/events/2448"&gt;#idcon 15th&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://togetter.com/li/448517"&gt;Togetther&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Yahoo! JAPANのOAuth/OpenIDに代わる新しい認証認可機能 -YConnect-&lt;/h2&gt;
&lt;p&gt;ヤフー株式会社 河内 俊介 氏  &lt;/p&gt;
&lt;h3&gt;YConnectとは？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OAuth2.0準拠 / OpenID Connectをサポートの Yahoo!&lt;br /&gt;
    の新認証認可システム  &lt;/li&gt;
&lt;li&gt;Yahoo! でログインが可能  &lt;/li&gt;
&lt;li&gt;ユーザの一部属性情報の連携が可能  &lt;/li&gt;
&lt;li&gt;OAuth1.0 に比べて RP の実装が容易  &lt;/li&gt;
&lt;li&gt;2012年末　YConnect 設計開始  &lt;/li&gt;
&lt;li&gt;2012年9月中旬　パートナー向け公開開始  &lt;/li&gt;
&lt;li&gt;現在　公開中  &lt;/li&gt;
&lt;li&gt;対応Authorization Grant@OAuth2.0&lt;br /&gt;
     Authorization Code&lt;br /&gt;
     Implicit  &lt;/li&gt;
&lt;li&gt;対応Profile@OpenID Connect&lt;br /&gt;
     Basic Client Profile&lt;br /&gt;
     Implicit Client Profile  &lt;/li&gt;
&lt;li&gt;100サイト以上、50以上の企業に提供 毎日新聞社、GREE等等  &lt;/li&gt;
&lt;li&gt;社内アプリには続々対応中  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用途の紹介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Yahooウォレットと連携することで決済システムを簡単に実装  &lt;/li&gt;
&lt;li&gt;属性情報の連携(ユーザ識別子、氏名、生年月日、ロケール情報、メールアドレス等等)&lt;br /&gt;
     プレミアム企業には更に多くの属性情報を開示している  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;導入構成図事例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Authorization Code 利用例  &lt;/li&gt;
&lt;li&gt;Implicit 利用例&lt;br /&gt;
     シーケンスの紹介  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;裏話&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OAuth1.0やBBAuthはYahoo!incのローカライズだった  &lt;/li&gt;
&lt;li&gt;ブラックボックスのため、メンテナンス工数が大変&lt;br /&gt;
     -&amp;gt; YConnectはフルスクラッチで開発することによりこの問題を解決  &lt;/li&gt;
&lt;li&gt;全WebAPIのSSL化を行う必要があった&lt;br /&gt;
     -&amp;gt; ワイルドカードの証明書で対応  &lt;/li&gt;
&lt;li&gt;仕様理解を深めるため、RFCの翻訳業務をPJで行った  &lt;/li&gt;
&lt;li&gt;Apple Store の reject 事例&lt;br /&gt;
    ブラウザを開いたタイミングでリンクがあると、課金の可能性を指定されrejectされた&lt;br /&gt;
     -&amp;gt; リンクを省くことで解決&lt;br /&gt;
     アプリケーションからsafariを使用してloginしたらrejectされた&lt;br /&gt;
    ログインしないと使えないようなアプリケーションはrejectされる可能性がある&lt;br /&gt;
     -&amp;gt; 解決策は見つかっていない  &lt;/li&gt;
&lt;li&gt;認証PF一覧&lt;br /&gt;
     用途によって認証PFが分散し、ユーザ識別子も分散していた&lt;br /&gt;
     　OAuth1.0 / Open ID2.0 / SSO 等  &lt;br /&gt;
     　-&amp;gt; YConnectでは上記全てを解決している  &lt;/li&gt;
&lt;li&gt;以下の機能拡張を検討中  &lt;br /&gt;
     PPID  &lt;br /&gt;
     OTP対応を検討中  &lt;br /&gt;
     シングルログアウト(Session Management)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. カスタムURIスキーマが被ってしまった場合のセキュリティリスクは？  &lt;br /&gt;
 A. Yahoo!が提供しているアプリは他社のアプリと被らないようにしている。  &lt;br /&gt;
 攻撃者がいた場合、技術的には被らせることは可能。今後の課題として扱う。  &lt;/p&gt;
&lt;h2&gt;「Andouroid Android OSのカスタマイズによるアプリ間統合認証の実現」&lt;/h2&gt;
&lt;p&gt;ヤフー株式会社 安藤 義裕 氏  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android OS layor からアタッチ  &lt;/li&gt;
&lt;li&gt;個人(趣味)で開発  &lt;/li&gt;
&lt;li&gt;デモンストレーション&lt;br /&gt;
     Yahoo!のアプリ二種類を使い、一方のアプリにログインすると&lt;br /&gt;
     もう一方で認証が必要なくなる仕組みをデモ  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1. Yahoo!メールアプリの起動&lt;br /&gt;
 　　未ログイン状態&lt;br /&gt;
 　　アプリ終了&lt;br /&gt;
 　2. Yahoo!ブラウザの起動&lt;br /&gt;
 　　メールページを開く&lt;br /&gt;
 　　未ログイン状態  &lt;br /&gt;
 　　UID/PWD入力  &lt;br /&gt;
 　　ログイン成功、コンテンツ確認  &lt;br /&gt;
 　　アプリ終了&lt;br /&gt;
 　3. Yahoo!メールアプリの起動&lt;br /&gt;
 　　ログイン状態を維持(SSO成功)  &lt;/p&gt;
&lt;h3&gt;改修内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WebKit(OSとアプリの中間レイヤー)の改造  &lt;/li&gt;
&lt;li&gt;ログイン画面を開く前にトークン(ストレージ)に問い合わせる仕組み  &lt;/li&gt;
&lt;li&gt;トークンはアプリケーション間で共有している  &lt;/li&gt;
&lt;li&gt;AndroidはアプリケーションごとにLinux UIDが割り当てられている  &lt;/li&gt;
&lt;li&gt;アプリが使用する Android 内の database file 等は上記の UID/GID&lt;br /&gt;
    により 660 の permission を付与し、 ACL を行っている  &lt;/li&gt;
&lt;li&gt;あんどうろいどは上記の database file&lt;br /&gt;
    に対し、独自user(yahoo)のアクセスを追加  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Androidのデータ共有の方法&lt;br /&gt;
     Content Provide&lt;br /&gt;
     　カレンダー、データ帳を他のアプリに提供&lt;br /&gt;
     Intent&lt;br /&gt;
     　アプリ間のデータのやりとり&lt;br /&gt;
     Shared Preference&lt;br /&gt;
     　テキスト等小さなデータを保存する。アプリ間の共有可能&lt;br /&gt;
     Shared ID  &lt;/p&gt;
&lt;p&gt;Play!Storeにuploadする際に、証明書を作成する。同じ証明書を使用していれば複数のapplicationで同じUIDを降ることができる    &lt;/p&gt;
&lt;p&gt;信頼できる大企業により同一の証明書を使用しアプリ間で情報連携を行うようにすれば、従来と異なるマーケットを開拓できるのでは&lt;br /&gt;
 その他(SQLite, Local File, Internet(Cloud))  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デバイス時代のID&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OSを握ってカスタマイズができる立場は非常に強力と感じている  &lt;/li&gt;
&lt;li&gt;Apple, Google&lt;br /&gt;
    をみてわかるように、OSベンダーであるからこそ出来ることは多い  &lt;/li&gt;
&lt;li&gt;やりたいこと、センシティブな情報の共有は、OSを握っているか否かで自由度がかなり変わる  &lt;/li&gt;
&lt;li&gt;デバイスの時代になると、デバイスのIDとWebのIDの境目は今後薄れていくと考えている  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q.　パッケージ名でYahoo!のアプリであることを判別している(模造可能、プロトタイプ版のため)&lt;br /&gt;
A.　アプリケーションにsignatureを付けることで正当性を確認する等の対応になると推測している  &lt;/p&gt;
&lt;p&gt;Q.　ストレージで何を共有していたか&lt;br /&gt;
A.　Cookie。本来はトークンになるべきところ。 &lt;/p&gt;
&lt;h2&gt;C向けサービスで2要素認証を普及させるためにできること&lt;/h2&gt;
&lt;p&gt;株式会社ミクシィ 伊東 諒 氏&lt;br /&gt;
&lt;a href="http://www.slideshare.net/ritou/idcon-15th-ritou-2factor-auth"&gt;Slide&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;現状と課題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C向けサービスにおける2要素認証の現状 &lt;/li&gt;
&lt;li&gt;金融系、ゲーム系などでは以前から普及 &lt;/li&gt;
&lt;li&gt;ユーザ数の多いサービスも実装  &lt;/li&gt;
&lt;li&gt;ワンタイムパスワードが実装方法として流行  &lt;/li&gt;
&lt;li&gt;ID/PWD認証 + αをオプションで提供  &lt;/li&gt;
&lt;li&gt;脆弱性や課題については黙認状態  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;普及への課題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ついてこれないユーザー&lt;br /&gt;
     サービスごとの設定は面倒  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;導入しにくいプロトコルの存在&lt;br /&gt;
     POP/IMAP/SMTP, XMPP, … &lt;br /&gt;
     認証とリソースアクセスの強い結びつき  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解決策&lt;br /&gt;
     Yahoo! Google Facebook 等に OpenID Connect で Rely する&lt;br /&gt;
     信頼あるプロバイダの認証強度をそのまま利用できることがメリット  &lt;/p&gt;
&lt;p&gt;認証とリソースアクセスの強い結びつきに対し、アクセストークンを利用して分離することで対応  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenID Providerがやるべきこと&lt;br /&gt;
     認証強度の見える化&lt;br /&gt;
     　RPからみて、OPがどのような認証をするのかを把握できることが大切 
     対応する認証強度を開示&lt;br /&gt;
     認証したユーザの認証強度を提供&lt;br /&gt;
     求められる認証強度をRPに指定させる  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relying Partyがやるべきこと&lt;br /&gt;
     自らのサービス・ユーザアクションに求められる認証強度を意識する 
     適切なタイミング、強度で再認証を要求する  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;残る課題&lt;br /&gt;
     2要素認証を採用しないOPはG&lt;br /&gt;
     1 USER per 1 OP の風潮&lt;br /&gt;
     -&amp;gt; ID/PW + αは組み合わせにくい?  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;追加認証に特化した認証プロバイダ&lt;br /&gt;
     RP側が既存OPとの組み合わせ&lt;br /&gt;
     Trustが重要&lt;br /&gt;
     　B向けに実績のあるサービスの進出&lt;br /&gt;
     物理デバイス、生体認証などの可能性  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;まとめ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最大の課題は”めんどくさい”と思わせるユーザビリティ  &lt;/li&gt;
&lt;li&gt;OpenID Connect は重要  &lt;/li&gt;
&lt;li&gt;経済合理性は別として追加認証に特化した認証プロバイダは有用かも  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;実際に追加認証に対応したプロバイダを作成してみた - SecondAuth -&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレスがあれば登録可能  &lt;/li&gt;
&lt;li&gt;OTP 認証のみ実装  &lt;/li&gt;
&lt;li&gt;OpenID Connect OP  &lt;/li&gt;
&lt;li&gt;YConnect, Google, Faceboo  k
    から受け取った確認済みメールアドレスを利用  &lt;/li&gt;
&lt;li&gt;OTP 認証には Google Authenticator を利用(Server側の処理)  &lt;/li&gt;
&lt;li&gt;ユーザ単位に Secret 作成  &lt;/li&gt;
&lt;li&gt;設定用の QR コード生成  &lt;/li&gt;
&lt;li&gt;otpauth://totp/(mailaddress)  &lt;/li&gt;
&lt;li&gt;secret=(base43_encoded_otp_secret)  &lt;/li&gt;
&lt;li&gt;ユーザはアプリをインストールし、QRコードを読み取るだけ  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;リモートログアウト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;現在アクティブなセッションを一元管理  &lt;/li&gt;
&lt;li&gt;手元で別の端末をログアウト可能  &lt;/li&gt;
&lt;li&gt;Facebook, Googleが実装  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;OpenID Connect Session Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OPのログアウトをRPから検知するための仕様  &lt;/li&gt;
&lt;li&gt;AuthZ Response にセッション識別子  &lt;/li&gt;
&lt;li&gt;iframe + postMessageを送り続ける  &lt;/li&gt;
&lt;li&gt;OPのログアウトをRPから検知し、他のRPのセッションも終わらせる等  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;#idcon mini のお知らせ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;もっと技術的な話をしたい人向けに #idcon mini を計画している &lt;/li&gt;
&lt;li&gt;少人数、USTなし  &lt;/li&gt;
&lt;li&gt;アンカンファレンスもどき  &lt;/li&gt;
&lt;li&gt;技術屋が気になることをじっくりと話せる場  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;パネルディスカッション「スマデバ時代ぼくらは幾つパスワードを使うのか 」※USTなし&lt;/h2&gt;
&lt;p&gt;ヤフー株式会社 セントラルサービスカンパニー 技術調査室 室長 楠 正憲 氏&lt;br /&gt;
 米国・OpenID Foundation 理事長 崎村 夏彦 氏&lt;br /&gt;
 セコム株式会社 IS研究所 松本 泰 氏&lt;br /&gt;
 OpenID Foundation Japan 事務局長代行 高橋 伸和 氏&lt;br /&gt;
 独立行政法人 情報処理推進機構 神田 雅透 氏  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;パスワードはどのくらい前からあるか&lt;br /&gt;
     1961年頃らしい。IBMのメインフレーム。&lt;br /&gt;
     一昨年がパスワード誕生50年  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSLが安全であるという土台の上に認証基盤を考えてきた&lt;br /&gt;
     2011年頃からきわどい状況になっている&lt;br /&gt;
     従来の認証基盤を維持していけるのかを考えていかないといけない時期  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSL/PKIはなぜ危機に陥ったのか 　 本セッションに興味があれば、PKI DAY&lt;br /&gt;
    2012から資料を取得  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jnsa.org/seminar/pki-day/2012/data/PM01_kanda.pdf"&gt;サイバー攻撃ツールとしての公開鍵証明書の役割&lt;/a&gt;&lt;br /&gt;
 (個人的に必見の資料だと思います。)  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ネットの信頼性は技術、制度・運用、実装、ユーザリテラシの4点から担保されている  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ルートCAはPKIのTrust Anchor  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公開鍵証明書が悪用されるのはどんなとき?&lt;br /&gt;
     ハッキングの問題&lt;br /&gt;
     　登録局の検証ミス&lt;br /&gt;
     　認証局への不正アクセス&lt;br /&gt;
     暗号技術の問題&lt;br /&gt;
     　計算量により秘密鍵を割り出す(公開鍵暗号の根本的な問題)  &lt;/p&gt;
&lt;p&gt;真正な公開鍵証明書と区別ができない不正な証明書を計算機により偽造(ハッシュ関数の問題)&lt;br /&gt;
 運用の問題&lt;br /&gt;
 　秘密鍵の流出&lt;br /&gt;
 　意図せず秘密鍵を共有  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DigiNotar のケース(PKIの危機を招いた事例)&lt;br /&gt;
     不正SSLサーバ証明書がCA機能を乗っ取られて発行 &lt;/p&gt;
&lt;p&gt;EV-SSLサーバ証明書発酵用CAを含め、少なくとも6つのCA(疑いを含めると30個以上のCA)に不正侵入され、不正SSLサーバ証明証を発行  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ルートCAとしてはあまりにも重大な失態が相次ぐ  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件報道されるまでの5週間、事実を隠蔽し続けた&lt;br /&gt;
     2011年6月17日攻撃が始まっていたことを把握  &lt;/p&gt;
&lt;p&gt;2011年7月19日以降、短期間に不正SSLサーバ証明書の発行・失効処理が繰り返されていたにも関わらず、根本的な対策を取らなかった&lt;br /&gt;
 2011年7月28日イランにおけるで不正SSLサーバ証明書の悪用を把握&lt;br /&gt;
 OSやブラウザベンダーにも通知をしなかった&lt;br /&gt;
-   主要ブラウザベンダーの対処&lt;br /&gt;
 DigiNotar のルート証明書を削除&lt;br /&gt;
-   DigiNotar は破産手続き開始&lt;br /&gt;
-   証明書を使うのを意識しないのはなぜ？&lt;br /&gt;
実際にはブラウザやアプリケーションが自動検証する&lt;br /&gt;
 登録されている「信頼できる認証局証明書」をベースに判定&lt;br /&gt;
 設定次第でリアルタイム検証も可能&lt;br /&gt;
 最もリテラシの低い人にあわせるとこうなってしまう、という典型  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;以後オフレコ部分が多かったため、割愛します。&lt;br /&gt;
 記述内容の間違い等がありましたら指摘頂けますと助かります。&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hisayoshi Tamaki</dc:creator><pubDate>Sun, 03 Feb 2013 19:19:00 +0900</pubDate><guid>tag:hisayosh.github.io,2013-02-03:posts/2013/02/idcon-15/</guid><category>OAuth</category><category>OpenID Connect</category></item></channel></rss>