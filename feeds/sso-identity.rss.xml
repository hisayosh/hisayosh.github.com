<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hisayosh-&gt;blog</title><link>http://hisayosh.github.io/</link><description></description><atom:link href="http://hisayosh.github.io/feeds/sso-identity.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 03 Feb 2013 19:19:00 +0900</lastBuildDate><item><title>Identity Conferene 15</title><link>http://hisayosh.github.io/posts/2013/02/idcon-15/</link><description>&lt;p&gt;Identity Conference 15(#idcon) に参加してきました。&lt;br /&gt;
 非常に勉強になったので今後も参加できればなぁと思うと同時に&lt;br /&gt;
 SSO/IDM製品の開発に携わった経験がありながら初参加という状況で少し反省。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://idcon.doorkeeper.jp/events/2448"&gt;#idcon 15th&lt;/a&gt; /
&lt;a href="http://togetter.com/li/448517"&gt;Togetther&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Yahoo! JAPANのOAuth/OpenIDに代わる新しい認証認可機能 -YConnect-&lt;/h2&gt;
&lt;p&gt;ヤフー株式会社 河内 俊介 氏&lt;/p&gt;
&lt;h3&gt;YConnectとは？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OAuth2.0準拠 / OpenID Connectをサポートの Yahoo!
    の新認証認可システム&lt;/li&gt;
&lt;li&gt;Yahoo! でログインが可能&lt;/li&gt;
&lt;li&gt;ユーザの一部属性情報の連携が可能&lt;/li&gt;
&lt;li&gt;OAuth1.0 に比べて RP の実装が容易&lt;/li&gt;
&lt;li&gt;2012年末　YConnect 設計開始&lt;/li&gt;
&lt;li&gt;2012年9月中旬　パートナー向け公開開始&lt;/li&gt;
&lt;li&gt;現在　公開中&lt;/li&gt;
&lt;li&gt;対応Authorization Grant@OAuth2.0&lt;br /&gt;
     Authorization Code&lt;br /&gt;
     Implicit&lt;/li&gt;
&lt;li&gt;対応Profile@OpenID Connect&lt;br /&gt;
     Basic Client Profile&lt;br /&gt;
     Implicit Client Profile&lt;/li&gt;
&lt;li&gt;100サイト以上、50以上の企業に提供 毎日新聞社、GREE等等&lt;/li&gt;
&lt;li&gt;社内アプリには続々対応中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用途の紹介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Yahooウォレットと連携することで決済システムを簡単に実装&lt;/li&gt;
&lt;li&gt;属性情報の連携(ユーザ識別子、氏名、生年月日、ロケール情報、メールアドレス等等)&lt;br /&gt;
     プレミアム企業には更に多くの属性情報を開示している&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;導入構成図事例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Authorization Code 利用例&lt;/li&gt;
&lt;li&gt;Implicit 利用例&lt;br /&gt;
     シーケンスの紹介&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;裏話&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OAuth1.0やBBAuthはYahoo!incのローカライズだった&lt;/li&gt;
&lt;li&gt;ブラックボックスのため、メンテナンス工数が大変&lt;br /&gt;
     -&amp;gt; YConnectはフルスクラッチで開発することによりこの問題を解決&lt;/li&gt;
&lt;li&gt;全WebAPIのSSL化を行う必要があった&lt;br /&gt;
     -&amp;gt; ワイルドカードの証明書で対応&lt;/li&gt;
&lt;li&gt;仕様理解を深めるため、RFCの翻訳業務をPJで行った&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apple Store の reject 事例  &lt;/p&gt;
&lt;p&gt;ブラウザを開いたタイミングでリンクがあると、課金の可能性を指定されrejectされた&lt;br /&gt;
 -&amp;gt; リンクを省くことで解決&lt;br /&gt;
 アプリケーションからsafariを使用してloginしたらrejectされた  &lt;/p&gt;
&lt;p&gt;ログインしないと使えないようなアプリケーションはrejectされる可能性がある&lt;br /&gt;
 　-&amp;gt; 解決策は見つかっていない
-   認証PF一覧&lt;br /&gt;
 用途によって認証PFが分散し、ユーザ識別子も分散していた&lt;br /&gt;
 　OAuth1.0 / Open ID2.0 / SSO 等&lt;br /&gt;
 　-&amp;gt; YConnectでは上記全てを解決している
-   以下の機能拡張を検討中&lt;br /&gt;
 PPID&lt;br /&gt;
 OTP対応を検討中&lt;br /&gt;
 シングルログアウト(Session Management)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q. カスタムURIスキーマが被ってしまった場合のセキュリティリスクは？&lt;br /&gt;
 A. Yahoo!が提供しているアプリは他社のアプリと被らないようにしている。&lt;br /&gt;
 攻撃者がいた場合、技術的には被らせることは可能。今後の課題として扱う。&lt;/p&gt;
&lt;h2&gt;「Andouroid Android OSのカスタマイズによるアプリ間統合認証の実現」&lt;/h2&gt;
&lt;p&gt;ヤフー株式会社 安藤 義裕 氏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android OS layor からアタッチ&lt;/li&gt;
&lt;li&gt;個人(趣味)で開発&lt;/li&gt;
&lt;li&gt;デモンストレーション&lt;br /&gt;
     Yahoo!のアプリ二種類を使い、一方のアプリにログインすると&lt;br /&gt;
     もう一方で認証が必要なくなる仕組みをデモ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1. Yahoo!メールアプリの起動&lt;br /&gt;
 　　未ログイン状態&lt;br /&gt;
 　　アプリ終了&lt;br /&gt;
 　2. Yahoo!ブラウザの起動&lt;br /&gt;
 　　メールページを開く&lt;br /&gt;
 　　未ログイン状態&lt;br /&gt;
 　　UID/PWD入力&lt;br /&gt;
 　　ログイン成功、コンテンツ確認&lt;br /&gt;
 　　アプリ終了&lt;br /&gt;
 　3. Yahoo!メールアプリの起動&lt;br /&gt;
 　　ログイン状態を維持(SSO成功)&lt;/p&gt;
&lt;h3&gt;改修内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WebKit(OSとアプリの中間レイヤー)の改造&lt;/li&gt;
&lt;li&gt;ログイン画面を開く前にトークン(ストレージ)に問い合わせる仕組み&lt;/li&gt;
&lt;li&gt;トークンはアプリケーション間で共有している&lt;/li&gt;
&lt;li&gt;AndroidはアプリケーションごとにLinux UIDが割り当てられている&lt;/li&gt;
&lt;li&gt;アプリが使用する Android 内の database file 等は上記の UID/GID
    により 660 の permission を付与し、 ACL を行っている&lt;/li&gt;
&lt;li&gt;あんどうろいどは上記の database file
    に対し、独自user(yahoo)のアクセスを追加&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Androidのデータ共有の方法&lt;br /&gt;
     Content Provide&lt;br /&gt;
     　カレンダー、データ帳を他のアプリに提供&lt;br /&gt;
     Intent&lt;br /&gt;
     　アプリ間のデータのやりとり&lt;br /&gt;
     Shared Preference&lt;br /&gt;
     　テキスト等小さなデータを保存する。アプリ間の共有可能&lt;br /&gt;
     Shared ID  &lt;/p&gt;
&lt;p&gt;Play!Storeにuploadする際に、証明書を作成する。同じ証明書を使用していれば複数のapplicationで同じUIDを降ることができる  &lt;/p&gt;
&lt;p&gt;信頼できる大企業により同一の証明書を使用しアプリ間で情報連携を行うようにすれば、従来と異なるマーケットを開拓できるのでは&lt;br /&gt;
 その他(SQLite, Local File, Internet(Cloud))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;デバイス時代のID&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OSを握ってカスタマイズができる立場は非常に強力と感じている&lt;/li&gt;
&lt;li&gt;Apple, Google
    をみてわかるように、OSベンダーであるからこそ出来ることは多い&lt;/li&gt;
&lt;li&gt;やりたいこと、センシティブな情報の共有は、OSを握っているか否かで自由度がかなり変わる&lt;/li&gt;
&lt;li&gt;デバイスの時代になると、デバイスのIDとWebのIDの境目は今後薄れていくと考えている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q.　パッケージ名でYahoo!のアプリであることを判別している(模造可能、プロトタイプ版のため)  &lt;/p&gt;
&lt;p&gt;A.　アプリケーションにsignatureを付けることで正当性を確認する等の対応になると推測している&lt;/p&gt;
&lt;p&gt;Q.　ストレージで何を共有していたか&lt;br /&gt;
 A.　Cookie。本来はトークンになるべきところ。&lt;/p&gt;
&lt;h2&gt;C向けサービスで2要素認証を普及させるためにできること&lt;/h2&gt;
&lt;p&gt;株式会社ミクシィ 伊東 諒 氏&lt;br /&gt;
&lt;a href="http://www.slideshare.net/ritou/idcon-15th-ritou-2factor-auth"&gt;Slide&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;現状と課題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C向けサービスにおける2要素認証の現状&lt;/li&gt;
&lt;li&gt;金融系、ゲーム系などでは以前から普及&lt;/li&gt;
&lt;li&gt;ユーザ数の多いサービスも実装&lt;/li&gt;
&lt;li&gt;ワンタイムパスワードが実装方法として流行&lt;/li&gt;
&lt;li&gt;ID/PWD認証 + αをオプションで提供&lt;/li&gt;
&lt;li&gt;脆弱性や課題については黙認状態&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;普及への課題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ついてこれないユーザー&lt;br /&gt;
     サービスごとの設定は面倒&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;導入しにくいプロトコルの存在&lt;br /&gt;
     POP/IMAP/SMTP, XMPP, …&lt;br /&gt;
     認証とリソースアクセスの強い結びつき&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解決策&lt;br /&gt;
     Yahoo! Google Facebook 等に OpenID Connect で Rely する&lt;br /&gt;
     信頼あるプロバイダの認証強度をそのまま利用できることがメリット  &lt;/p&gt;
&lt;p&gt;認証とリソースアクセスの強い結びつきに対し、アクセストークンを利用して分離することで対応&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenID Providerがやるべきこと&lt;br /&gt;
     認証強度の見える化&lt;br /&gt;
     　RPからみて、OPがどのような認証をするのかを把握できることが大切&lt;br /&gt;
     対応する認証強度を開示&lt;br /&gt;
     認証したユーザの認証強度を提供&lt;br /&gt;
     求められる認証強度をRPに指定させる&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relying Partyがやるべきこと&lt;br /&gt;
     自らのサービス・ユーザアクションに求められる認証強度を意識する&lt;br /&gt;
     適切なタイミング、強度で再認証を要求する&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;残る課題&lt;br /&gt;
     2要素認証を採用しないOPはG&lt;br /&gt;
     1 USER per 1 OP の風潮&lt;br /&gt;
     -&amp;gt; ID/PW + αは組み合わせにくい?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;追加認証に特化した認証プロバイダ&lt;br /&gt;
     RP側が既存OPとの組み合わせ&lt;br /&gt;
     Trustが重要&lt;br /&gt;
     　B向けに実績のあるサービスの進出&lt;br /&gt;
     物理デバイス、生体認証などの可能性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;まとめ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最大の課題は”めんどくさい”と思わせるユーザビリティ&lt;/li&gt;
&lt;li&gt;OpenID Connect は重要&lt;/li&gt;
&lt;li&gt;経済合理性は別として追加認証に特化した認証プロバイダは有用かも&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;実際に追加認証に対応したプロバイダを作成してみた - SecondAuth -&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;メールアドレスがあれば登録可能&lt;/li&gt;
&lt;li&gt;OTP 認証のみ実装&lt;/li&gt;
&lt;li&gt;OpenID Connect OP&lt;/li&gt;
&lt;li&gt;YConnect, Google, Facebook
    から受け取った確認済みメールアドレスを利用&lt;/li&gt;
&lt;li&gt;OTP 認証には Google Authenticator を利用(Server側の処理)&lt;/li&gt;
&lt;li&gt;ユーザ単位に Secret 作成&lt;/li&gt;
&lt;li&gt;設定用の QR コード生成&lt;/li&gt;
&lt;li&gt;otpauth://totp/(mailaddress)?&lt;/li&gt;
&lt;li&gt;secret=(base43_encoded_otp_secret)&lt;/li&gt;
&lt;li&gt;ユーザはアプリをインストールし、QRコードを読み取るだけ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;リモートログアウト&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;現在アクティブなセッションを一元管理&lt;/li&gt;
&lt;li&gt;手元で別の端末をログアウト可能&lt;/li&gt;
&lt;li&gt;Facebook, Googleが実装&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;OpenID Connect Session Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OPのログアウトをRPから検知するための仕様&lt;/li&gt;
&lt;li&gt;AuthZ Response にセッション識別子&lt;/li&gt;
&lt;li&gt;iframe + postMessageを送り続ける&lt;/li&gt;
&lt;li&gt;OPのログアウトをRPから検知し、他のRPのセッションも終わらせる等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;#idcon mini のお知らせ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;もっと技術的な話をしたい人向けに #idcon mini を計画している&lt;/li&gt;
&lt;li&gt;少人数、USTなし&lt;/li&gt;
&lt;li&gt;アンカンファレンスもどき&lt;/li&gt;
&lt;li&gt;技術屋が気になることをじっくりと話せる場&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;パネルディスカッション「スマデバ時代ぼくらは幾つパスワードを使うのか 」※USTなし&lt;/h2&gt;
&lt;p&gt;ヤフー株式会社 セントラルサービスカンパニー 技術調査室 室長 楠 正憲 氏&lt;br /&gt;
 米国・OpenID Foundation 理事長 崎村 夏彦 氏&lt;br /&gt;
 セコム株式会社 IS研究所 松本 泰 氏&lt;br /&gt;
 OpenID Foundation Japan 事務局長代行 高橋 伸和 氏&lt;br /&gt;
 独立行政法人 情報処理推進機構 神田 雅透 氏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;パスワードはどのくらい前からあるか&lt;br /&gt;
     1961年頃らしい。IBMのメインフレーム。&lt;br /&gt;
     一昨年がパスワード誕生50年&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSLが安全であるという土台の上に認証基盤を考えてきた&lt;br /&gt;
     2011年頃からきわどい状況になっている&lt;br /&gt;
     従来の認証基盤を維持していけるのかを考えていかないといけない時期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSL/PKIはなぜ危機に陥ったのか 　 本セッションに興味があれば、PKI DAY
    2012から資料を取得  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.jnsa.org/seminar/pki-day/2012/data/PM01_kanda.pdf"&gt;サイバー攻撃ツールとしての公開鍵証明書の役割&lt;/a&gt;&lt;br /&gt;
 (個人的に必見の資料だと思います。)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ネットの信頼性は技術、制度・運用、実装、ユーザリテラシの4点から担保されている&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ルートCAはPKIのTrust Anchor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公開鍵証明書が悪用されるのはどんなとき?&lt;br /&gt;
     ハッキングの問題&lt;br /&gt;
     　登録局の検証ミス&lt;br /&gt;
     　認証局への不正アクセス&lt;br /&gt;
     暗号技術の問題&lt;br /&gt;
     　計算量により秘密鍵を割り出す(公開鍵暗号の根本的な問題)  &lt;/p&gt;
&lt;p&gt;真正な公開鍵証明書と区別ができない不正な証明書を計算機により偽造(ハッシュ関数の問題)&lt;br /&gt;
 運用の問題&lt;br /&gt;
 　秘密鍵の流出&lt;br /&gt;
 　意図せず秘密鍵を共有&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DigiNotar のケース(PKIの危機を招いた事例)&lt;br /&gt;
     不正SSLサーバ証明書がCA機能を乗っ取られて発行  &lt;/p&gt;
&lt;p&gt;EV-SSLサーバ証明書発酵用CAを含め、少なくとも6つのCA(疑いを含めると30個以上のCA)に不正侵入され、不正SSLサーバ証明証を発行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ルートCAとしてはあまりにも重大な失態が相次ぐ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件報道されるまでの5週間、事実を隠蔽し続けた&lt;br /&gt;
     2011年6月17日攻撃が始まっていたことを把握  &lt;/p&gt;
&lt;p&gt;2011年7月19日以降、短期間に不正SSLサーバ証明書の発行・失効処理が繰り返されていたにも関わらず、根本的な対策を取らなかった&lt;br /&gt;
 2011年7月28日イランにおけるで不正SSLサーバ証明書の悪用を把握&lt;br /&gt;
 OSやブラウザベンダーにも通知をしなかった
-   主要ブラウザベンダーの対処&lt;br /&gt;
 DigiNotar のルート証明書を削除
-   DigiNotar は破産手続き開始
-   証明書を使うのを意識しないのはなぜ？
実際にはブラウザやアプリケーションが自動検証する&lt;br /&gt;
 登録されている「信頼できる認証局証明書」をベースに判定&lt;br /&gt;
 設定次第でリアルタイム検証も可能&lt;br /&gt;
 最もリテラシの低い人にあわせるとこうなってしまう、という典型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;以後オフレコ部分が多かったため、割愛します。&lt;br /&gt;
 記述内容の間違い等がありましたら指摘頂けますと助かります。&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hisayoshi Tamaki</dc:creator><pubDate>Sun, 03 Feb 2013 19:19:00 +0900</pubDate><guid>tag:hisayosh.github.io,2013-02-03:posts/2013/02/idcon-15/</guid><category>OAuth</category><category>OpenID Connect</category></item></channel></rss>